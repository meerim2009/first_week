{"ast":null,"code":"var _jsxFileName = \"/Users/meerim/Desktop/first_week/src/index.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from 'react';\nimport ReactDOM from 'react-dom'; // class Counter extends React.Component {\n//     state = {\n//         count: 1000\n//     }\n//\n//     onIncrease = () => {\n//         this.setState((oldState) => {\n//             return {\n//                 count: oldState.count + 1\n//             }\n//         })\n//     }\n//     onDecrease = () => {\n//         this.setState((oldState) => {\n//             return {\n//                 count: oldState.count - 1\n//             }\n//         })\n//     }\n//\n//     UNSAFE_componentWillMount() {\n//         console.log('WILL MOUNT')\n//     }\n//     componentDidMount() {\n//         this.myMount = setInterval(() => {\n//             console.log('>>>>>>> HELLO ARSENIY')\n//         }, 2000)\n//     }\n//     // shouldComponentUpdate = (newProps, newState) =>{\n//     //     if (newState.count !== this.state.count) {\n//     //         return true\n//     //     }else {\n//     //         return false\n//     //     }\n//     // }\n//\n//     UNSAFE_componentWillUpdate() {\n//         console.log('WILL UPDATE')\n//     }\n//     componentDidUpdate() {\n//         console.log('DID UPDATE')\n//     }\n//\n//     componentWillUnmount() {\n//         clearInterval(this.myMount)\n//     }\n//\n//\n//     render () {\n//         console.log('RENDER')\n//         return (\n//             <div>\n//                 <p>{this.state.count}</p>\n//                 <input onClick={this.onIncrease} type=\"button\" value='Increase'/>\n//                 <input onClick={this.onDecrease} type=\"button\" value='Decrease'/>\n//             </div>\n//         )\n//     }\n//\n// }\n//\n// class App extends React.Component{\n//     state = {\n//         showCounter: true\n//     }\n//     onToggleCounter = () => {\n//         this.setState((oldState) => {\n//             return {\n//                 showCounter: !oldState.showCounter\n//             }\n//         })\n//     }\n//     render () {\n//         const content = this.state.showCounter ? <Counter /> : null\n//         return (\n//             <div>\n//                 {content}\n//                 <button onClick={this.onToggleCounter}>Reset</button>\n//             </div>\n//         )\n//     }\n//\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Counter() {\n  _s();\n\n  const [count, setCount] = useState(0);\n  const [delay, setDelay] = useState(1000);\n  useInterval(() => {\n    // Your custom logic here\n    setCount(count + 1);\n  }, delay);\n\n  function handleDelayChange(e) {\n    setDelay(Number(e.target.value));\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: count\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      value: delay,\n      onChange: handleDelayChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Counter, \"a+osbGTD/ZBjcgedCig09ZSnaZE=\", false, function () {\n  return [useInterval];\n});\n\n_c = Counter;\n\nfunction useInterval(callback, delay) {\n  _s2();\n\n  const savedCallback = useRef(); // Remember the latest function.\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]); // Set up the interval.\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\n_s2(useInterval, \"dqNZMqbncP+HtqBlD20aSNv0Ugk=\");\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render( /*#__PURE__*/_jsxDEV(Counter, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 133,\n  columnNumber: 17\n}, this), rootElement);\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 135,\n  columnNumber: 5\n}, this), document.getElementById('root'));\n\nvar _c;\n\n$RefreshReg$(_c, \"Counter\");","map":{"version":3,"sources":["/Users/meerim/Desktop/first_week/src/index.js"],"names":["React","ReactDOM","Counter","count","setCount","useState","delay","setDelay","useInterval","handleDelayChange","e","Number","target","value","callback","savedCallback","useRef","useEffect","current","tick","id","setInterval","clearInterval","rootElement","document","getElementById","render"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAIA,SAASC,OAAT,GAAmB;AAAA;;AACjB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBC,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBF,QAAQ,CAAC,IAAD,CAAlC;AAEAG,EAAAA,WAAW,CAAC,MAAM;AAChB;AACAJ,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACD,GAHU,EAGRG,KAHQ,CAAX;;AAKA,WAASG,iBAAT,CAA2BC,CAA3B,EAA8B;AAC5BH,IAAAA,QAAQ,CAACI,MAAM,CAACD,CAAC,CAACE,MAAF,CAASC,KAAV,CAAP,CAAR;AACD;;AAED,sBACE;AAAA,4BACE;AAAA,gBAAKV;AAAL;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAO,MAAA,KAAK,EAAEG,KAAd;AAAqB,MAAA,QAAQ,EAAEG;AAA/B;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAMD;;GAnBQP,O;UAIPM,W;;;KAJON,O;;AAqBT,SAASM,WAAT,CAAqBM,QAArB,EAA+BR,KAA/B,EAAsC;AAAA;;AACpC,QAAMS,aAAa,GAAGC,MAAM,EAA5B,CADoC,CAGpC;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACdF,IAAAA,aAAa,CAACG,OAAd,GAAwBJ,QAAxB;AACD,GAFQ,EAEN,CAACA,QAAD,CAFM,CAAT,CAJoC,CAQpC;;AACAG,EAAAA,SAAS,CAAC,MAAM;AACd,aAASE,IAAT,GAAgB;AACdJ,MAAAA,aAAa,CAACG,OAAd;AACD;;AACD,QAAIZ,KAAK,KAAK,IAAd,EAAoB;AAClB,UAAIc,EAAE,GAAGC,WAAW,CAACF,IAAD,EAAOb,KAAP,CAApB;AACA,aAAO,MAAMgB,aAAa,CAACF,EAAD,CAA1B;AACD;AACF,GARQ,EAQN,CAACd,KAAD,CARM,CAAT;AASD;;IAlBQE,W;;AAoBT,MAAMe,WAAW,GAAGC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAApB;AACAxB,QAAQ,CAACyB,MAAT,eAAgB,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,QAAhB,EAA6BH,WAA7B;AACAtB,QAAQ,CAACyB,MAAT,eACI,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,QADJ,EAEEF,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAFF","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\n\n// class Counter extends React.Component {\n//     state = {\n//         count: 1000\n//     }\n//\n//     onIncrease = () => {\n//         this.setState((oldState) => {\n//             return {\n//                 count: oldState.count + 1\n//             }\n//         })\n//     }\n//     onDecrease = () => {\n//         this.setState((oldState) => {\n//             return {\n//                 count: oldState.count - 1\n//             }\n//         })\n//     }\n//\n//     UNSAFE_componentWillMount() {\n//         console.log('WILL MOUNT')\n//     }\n//     componentDidMount() {\n//         this.myMount = setInterval(() => {\n//             console.log('>>>>>>> HELLO ARSENIY')\n//         }, 2000)\n//     }\n//     // shouldComponentUpdate = (newProps, newState) =>{\n//     //     if (newState.count !== this.state.count) {\n//     //         return true\n//     //     }else {\n//     //         return false\n//     //     }\n//     // }\n//\n//     UNSAFE_componentWillUpdate() {\n//         console.log('WILL UPDATE')\n//     }\n//     componentDidUpdate() {\n//         console.log('DID UPDATE')\n//     }\n//\n//     componentWillUnmount() {\n//         clearInterval(this.myMount)\n//     }\n//\n//\n//     render () {\n//         console.log('RENDER')\n//         return (\n//             <div>\n//                 <p>{this.state.count}</p>\n//                 <input onClick={this.onIncrease} type=\"button\" value='Increase'/>\n//                 <input onClick={this.onDecrease} type=\"button\" value='Decrease'/>\n//             </div>\n//         )\n//     }\n//\n// }\n//\n// class App extends React.Component{\n//     state = {\n//         showCounter: true\n//     }\n//     onToggleCounter = () => {\n//         this.setState((oldState) => {\n//             return {\n//                 showCounter: !oldState.showCounter\n//             }\n//         })\n//     }\n//     render () {\n//         const content = this.state.showCounter ? <Counter /> : null\n//         return (\n//             <div>\n//                 {content}\n//                 <button onClick={this.onToggleCounter}>Reset</button>\n//             </div>\n//         )\n//     }\n//\n// }\n\n\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  const [delay, setDelay] = useState(1000);\n\n  useInterval(() => {\n    // Your custom logic here\n    setCount(count + 1);\n  }, delay);\n\n  function handleDelayChange(e) {\n    setDelay(Number(e.target.value));\n  }\n\n  return (\n    <>\n      <h1>{count}</h1>\n      <input value={delay} onChange={handleDelayChange} />\n    </>\n  );\n}\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest function.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<Counter />, rootElement);\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n\n"]},"metadata":{},"sourceType":"module"}