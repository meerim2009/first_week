{"ast":null,"code":"var _jsxFileName = \"/Users/meerim/Desktop/first_week/src/index.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Counter extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      count: 1000\n    };\n\n    this.onIncrease = () => {\n      this.setState(oldState => {\n        return {\n          count: oldState.count + 1\n        };\n      });\n    };\n\n    this.onDecrease = () => {\n      this.setState(oldState => {\n        return {\n          count: oldState.count - 1\n        };\n      });\n    };\n  }\n\n  UNSAFE_componentWillMount() {\n    console.log('WILL MOUNT');\n  }\n\n  componentDidMount() {\n    this.myMount = setInterval(() => {\n      console.log('>>>>>>> HELLO ARSENIY');\n    }, 2000);\n  } // shouldComponentUpdate = (newProps, newState) =>{\n  //     if (newState.count !== this.state.count) {\n  //         return true\n  //     }else {\n  //         return false\n  //     }\n  // }\n\n\n  UNSAFE_componentWillUpdate() {\n    console.log('WILL UPDATE');\n  }\n\n  componentDidUpdate() {\n    console.log('DID UPDATE');\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.myMount);\n  }\n\n  render() {\n    console.log('RENDER');\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: this.state.count\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        onClick: this.onIncrease,\n        type: \"button\",\n        value: \"Increase\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        onClick: this.onDecrease,\n        type: \"button\",\n        value: \"Decrease\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nclass App extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      showCounter: true\n    };\n\n    this.onToggleCounter = () => {\n      this.setState(oldState => {\n        return {\n          showCounter: !oldState.showCounter\n        };\n      });\n    };\n  }\n\n  render() {\n    const content = this.state.showCounter ? /*#__PURE__*/_jsxDEV(Counter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 50\n    }, this) : null;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [content, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.onToggleCounter,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nfunction AutoDec() {\n  _s();\n\n  const [count, setCount] = useState(1000);\n  const [delay, setDelay] = useState(1000);\n  useInterval(() => {\n    setCount(count - 1);\n  }, delay);\n\n  function handleDelayChange(e) {\n    setDelay(Number(e.target.value));\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: count\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      value: delay,\n      onChange: handleDelayChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(AutoDec, \"A7SpRvFzuNEShwE9gt6n+xFcm/M=\", false, function () {\n  return [useInterval];\n});\n\n_c = AutoDec;\n\nfunction useInterval(callback, delay) {\n  _s2();\n\n  const savedCallback = useRef();\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\n_s2(useInterval, \"dqNZMqbncP+HtqBlD20aSNv0Ugk=\");\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render( /*#__PURE__*/_jsxDEV(Counter, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 133,\n  columnNumber: 17\n}, this), rootElement);\n\nvar _c;\n\n$RefreshReg$(_c, \"AutoDec\");","map":{"version":3,"sources":["/Users/meerim/Desktop/first_week/src/index.js"],"names":["React","useState","useEffect","useRef","ReactDOM","Counter","Component","state","count","onIncrease","setState","oldState","onDecrease","UNSAFE_componentWillMount","console","log","componentDidMount","myMount","setInterval","UNSAFE_componentWillUpdate","componentDidUpdate","componentWillUnmount","clearInterval","render","App","showCounter","onToggleCounter","content","AutoDec","setCount","delay","setDelay","useInterval","handleDelayChange","e","Number","target","value","callback","savedCallback","current","tick","id","rootElement","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport ReactDOM from \"react-dom\";\n\n\nclass Counter extends React.Component {\n    state = {\n        count: 1000\n    }\n\n    onIncrease = () => {\n        this.setState((oldState) => {\n            return {\n                count: oldState.count + 1\n            }\n        })\n    }\n    onDecrease = () => {\n        this.setState((oldState) => {\n            return {\n                count: oldState.count - 1\n            }\n        })\n    }\n\n    UNSAFE_componentWillMount() {\n        console.log('WILL MOUNT')\n    }\n    componentDidMount() {\n        this.myMount = setInterval(() => {\n            console.log('>>>>>>> HELLO ARSENIY')\n        }, 2000)\n    }\n    // shouldComponentUpdate = (newProps, newState) =>{\n    //     if (newState.count !== this.state.count) {\n    //         return true\n    //     }else {\n    //         return false\n    //     }\n    // }\n\n    UNSAFE_componentWillUpdate() {\n        console.log('WILL UPDATE')\n    }\n    componentDidUpdate() {\n        console.log('DID UPDATE')\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.myMount)\n    }\n\n\n    render () {\n        console.log('RENDER')\n        return (\n            <div>\n                <p>{this.state.count}</p>\n                <input onClick={this.onIncrease} type=\"button\" value='Increase'/>\n                <input onClick={this.onDecrease} type=\"button\" value='Decrease'/>\n            </div>\n        )\n    }\n\n}\n\nclass App extends React.Component{\n    state = {\n        showCounter: true\n    }\n    onToggleCounter = () => {\n        this.setState((oldState) => {\n            return {\n                showCounter: !oldState.showCounter\n            }\n        })\n    }\n    render () {\n        const content = this.state.showCounter ? <Counter /> : null\n        return (\n            <div>\n                {content}\n                <button onClick={this.onToggleCounter}>Reset</button>\n            </div>\n        )\n    }\n\n}\n\n\n\nfunction AutoDec() {\n  const [count, setCount] = useState(1000);\n  const [delay, setDelay] = useState(1000);\n\n  useInterval(() => {\n\n    setCount(count - 1);\n  }, delay);\n\n  function handleDelayChange(e) {\n    setDelay(Number(e.target.value));\n  }\n\n  return (\n    <>\n      <h1>{count}</h1>\n      <input value={delay} onChange={handleDelayChange} />\n    </>\n  );\n}\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<Counter />, rootElement);\n\n\n"]},"metadata":{},"sourceType":"module"}